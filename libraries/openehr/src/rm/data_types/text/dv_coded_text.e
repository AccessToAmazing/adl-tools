note
	component:   "openEHR ADL Tools"
	description: "[
				 Text which is from a terminology, such as ICD10, ICPC, SNOMED or 
				 a terminology generated by a description logic-based ontology such as Galen
				 ]"
	keywords:    "term, text"
	requirements:"ISO 18308 TS V1.0 STR 4.1, 4.2, 4.3"
	design:      "openEHR Data Types Reference Model 1.7"
	author:      "Thomas Beale <thomas.beale@oceaninformatics.com>"
	support:     "http://www.openehr.org/issues/browse/AWB"
	copyright:   "Copyright (c) 2000- The openEHR Foundation <http://www.openEHR.org>"
	license:     "Apache 2.0 License <http://www.apache.org/licenses/LICENSE-2.0.html>"

class DV_CODED_TEXT

inherit
	DV_TEXT
		rename
			make as make_text
		redefine
			is_equal, as_string, make_from_string
		end

create
	make, make_from_string

feature -- Definitions

	Default_primary_code: STRING = "0"

	Default_primary_rubric: STRING = "unknown"

	Value_delimiter: CHARACTER = '|'

feature -- Initialization

	make (str: STRING; a_code: CODE_PHRASE)
		require
			String_valid: not str.is_empty
		do
			value := str
			defining_code := a_code
		ensure
			Value_set: value = str
			Code_set: defining_code = a_code
		end

	make_from_string (str: STRING)
		do
		end

feature -- Access

	defining_code: CODE_PHRASE
			-- the (possibly coordinated) term from a terminology service whose rubric is the 'value' attribute
		attribute
			create Result.default_create
		end

feature -- Comparison

	is_equal (other: like Current): BOOLEAN
			-- True if value and key are equal in this and `other'
		do
			Result := value.is_equal (other.value) and defining_code.is_equal (other.defining_code)
		end

	is_comparable (other: like Current): BOOLEAN
			-- True if Current and other are both from same vocabulary; only really meaingiful
			-- for terms from same small vocabulary, i.e. a subset or value range
		do
			Result := defining_code.terminology_id.is_equal (other.defining_code.terminology_id)
		end

feature -- Output

	as_string: STRING
			-- Result in form as `value'
		do
			create Result.make_empty
			Result.append (defining_code.as_string)
			Result.append_character (value_delimiter)
			Result.append (value)
			Result.append_character (value_delimiter)
		end

end


