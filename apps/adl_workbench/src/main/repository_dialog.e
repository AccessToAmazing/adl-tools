indexing
	description: "Objects that represent an EV_DIALOG.%
		%The original version of this class was generated by EiffelBuild."
	date: "$Date: 2005/01/07 19:38:13 $"
	revision: "$Revision$"

class
	REPOSITORY_DIALOG

inherit
	REPOSITORY_DIALOG_IMP

	SHARED_ARCHETYPE_DIRECTORY
		export
			{NONE} all
		undefine
			copy, default_create
		end

	SHARED_UI_RESOURCES
		export
			{NONE} all
		undefine
			copy, default_create
		end

feature {NONE} -- Initialization

	user_initialization is
			-- Called by `initialize'.
			-- Any custom user initialization that
			-- could not be performed in `initialize',
			-- (due to regeneration of implementation class)
			-- can be added here.
		do
			set_default_cancel_button(repository_dialog_cancel_bn)
			set_default_push_button (repository_dialog_ok_bn)
			show_actions.extend(agent repository_dialog_reference_path_edit.set_focus)
			populate_controls
		end

feature -- Access

	main_window: MAIN_WINDOW
			-- main window of app

feature -- Modification

	set_main_window(a_mw: MAIN_WINDOW) is
			-- set main_window
		require
			a_mw /= Void
		do
			main_window := a_mw
		end

feature {NONE} -- Implementation

	populate_controls is
			-- set dialog values from shared settings
		do
			repository_dialog_reference_path_edit.set_text(reference_repository_path)
			repository_dialog_work_path_edit.set_text(work_repository_path)
		end		
	
	repository_dialog_ok is
			-- Called by `select_actions' of `repository_dialog_ok_bn'.
		do
			hide
			if not repository_dialog_reference_path_edit.text.is_empty then
				set_reference_repository_path(repository_dialog_reference_path_edit.text)
				archetype_directory.make
				archetype_directory.put_repository (reference_repository_path, "repository")			
			end
			if not repository_dialog_work_path_edit.text.is_empty then
				set_work_repository_path(repository_dialog_work_path_edit.text)
				archetype_directory.put_repository (work_repository_path, "work")
			end
			main_window.populate_archetype_directory

			save_resources
			main_window.update_status_area("wrote config file " + Resource_config_file_name + "%N")
		end

	repository_dialog_cancel is
			-- Called by `select_actions' of `repository_dialog_cancel_bn'.
		do
			hide
		end

	get_reference_repository_path is
			-- Called by `select_actions' of `repository_dialog_reference_path_button'.
		local
			a_dir: STRING
			error_dialog: EV_INFORMATION_DIALOG
		do
			a_dir := get_directory(reference_repository_path, Current)
			if not archetype_directory.valid_directory (a_dir) then
				create error_dialog.make_with_text("invalid reference directory: " + 
					a_dir + " does not exist, or is same as, or is parent or child of another repository path ")
				error_dialog.show_modal_to_window (Current)
			else
				repository_dialog_reference_path_edit.set_text(a_dir)
			end
		end

	get_work_repository_path is
			-- Called by `select_actions' of `repository_dialog_work_path_button'.
		local
			a_dir: STRING
			error_dialog: EV_INFORMATION_DIALOG
		do
			if work_repository_path.is_empty then
				set_work_repository_path(reference_repository_path.twin)
			end
			a_dir := get_directory(work_repository_path, Current)
			if not archetype_directory.valid_directory (a_dir) then
				create error_dialog.make_with_text("invalid work directory: " + 
					a_dir + " does not exist, or is same as, or is parent or child of reference repository path")
				error_dialog.show_modal_to_window (Current)
			else
				repository_dialog_work_path_edit.set_text(a_dir)
			end
		end

end

