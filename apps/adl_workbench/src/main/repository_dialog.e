indexing
	description: "Objects that represent an EV_DIALOG.%
		%The original version of this class was generated by EiffelBuild."
	date: "$Date: 2005/01/07 19:38:13 $"
	revision: "$Revision$"

class
	REPOSITORY_DIALOG

inherit
	REPOSITORY_DIALOG_IMP

	EV_STOCK_PIXMAPS
		rename
			implementation as pixmaps_implementation
		export
			{NONE} all
		undefine
			copy, default_create
		end

	SHARED_ARCHETYPE_DIRECTORY
		export
			{NONE} all
		undefine
			copy, default_create
		end

feature {NONE} -- Initialization

	user_initialization is
			-- Called by `initialize'.
			-- Any custom user initialization that
			-- could not be performed in `initialize',
			-- (due to regeneration of implementation class)
			-- can be added here.
		do
			set_icon_pixmap (adl_workbench_ico)
			repository_dialog_cancel_button.select_actions.extend (agent hide)
			set_default_cancel_button (repository_dialog_cancel_button)
			set_default_push_button (repository_dialog_ok_button)
			show_actions.extend (agent repository_dialog_reference_path_text.set_focus)
			repository_dialog_reference_path_text.focus_in_actions.extend (agent on_select_all (repository_dialog_reference_path_text))
			repository_dialog_work_path_text.focus_in_actions.extend (agent on_select_all (repository_dialog_work_path_text))
			populate_controls
		end

feature -- Access

	main_window: MAIN_WINDOW
			-- Main window of the applicaton.

feature -- Modification

	set_main_window (value: MAIN_WINDOW) is
			-- Set `main_window'.
		require
			value_attached: value /= Void
		do
			main_window := value
		ensure
			set: main_window = value
		end

feature {NONE} -- Implementation

	populate_controls is
			-- Initialise the dialog's widgets from shared settings.
		do
			repository_dialog_reference_path_text.set_text (reference_repository_path)
			repository_dialog_work_path_text.set_text (work_repository_path)
		end

	repository_dialog_ok is
			-- When the user clicks the OK button, save the changes and rebuild `archetype_directory'.
		local
			error_dialog: EV_INFORMATION_DIALOG
			paths_changed, paths_invalid: BOOLEAN
			s: STRING
		do
			s := repository_dialog_reference_path_text.text

			if not s.is_equal (reference_repository_path) then
				if directory_exists (s) then
					set_reference_repository_path (s)
					paths_changed := True
				else
					create error_dialog.make_with_text ("Reference Repository %"" + s + "%" does not exist.")
					error_dialog.show_modal_to_window (Current)
					paths_invalid := True
				end
			end

			s := repository_dialog_work_path_text.text

			if not s.is_equal (work_repository_path) then
				if s.is_empty or else archetype_directory.valid_repository_path (s) then
					set_work_repository_path (s)
					paths_changed := True
				else
					create error_dialog.make_with_text ("Work Repository %"" + s +
						"%" does not exist, or is the same as or a parent or a child of the Reference Repository.")
					error_dialog.show_modal_to_window (Current)
					paths_invalid := True
				end
			end

			if paths_changed then
				save_resources
				main_window.update_status_area ("Wrote config file %"" + Resource_config_file_name + "%".%N")
				main_window.populate_archetype_directory
			end

			if not paths_invalid then
				hide
			end
		end

	get_reference_repository_path is
			-- Display a dialog for the user select the Reference Repository.
		do
			repository_dialog_reference_path_text.set_text (get_directory (reference_repository_path, Current))
		end

	get_work_repository_path is
			-- Display a dialog for the user select the Work Repository.
		do
			if work_repository_path.is_empty then
				set_work_repository_path (reference_repository_path.twin)
			end

			repository_dialog_work_path_text.set_text (get_directory (work_repository_path, Current))
		end

	on_select_all (text: EV_TEXT_FIELD)
			-- Select all text in `text', if any.
		do
			if text /= Void and then text.text_length > 0 then
				text.select_all
			end
		end

end
