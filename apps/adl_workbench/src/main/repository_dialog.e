note
	description: "Dialog for the user to enter the repository paths.%
		%The original version of this class was generated by EiffelBuild."
	date: "$Date: 2005/01/07 19:38:13 $"
	revision: "$Revision$"

class
	REPOSITORY_DIALOG

inherit
	REPOSITORY_DIALOG_IMP

	EV_STOCK_PIXMAPS
		rename
			implementation as pixmaps_implementation
		export
			{NONE} all
		undefine
			copy, default_create
		end

	SHARED_KNOWLEDGE_REPOSITORY
		export
			{NONE} all
		undefine
			copy, default_create
		end

feature {NONE} -- Initialization

	user_initialization
			-- Called by `initialize'.
			-- Any custom user initialization that
			-- could not be performed in `initialize',
			-- (due to regeneration of implementation class)
			-- can be added here.
		do
			set_icon_pixmap (adl_workbench_ico)
			repository_dialog_cancel_button.select_actions.extend (agent hide)
			set_default_cancel_button (repository_dialog_cancel_button)
			set_default_push_button (repository_dialog_ok_button)
--			show_actions.extend (agent repository_dialog_reference_path_cb.set_focus)
--			repository_dialog_reference_path_cb.focus_in_actions.extend (agent on_select_all (repository_dialog_reference_path_cb))
			repository_dialog_work_path_text.focus_in_actions.extend (agent on_select_all (repository_dialog_work_path_text))
			populate_controls
		end

feature -- Status

	has_changed_paths: BOOLEAN
			-- Has the user OK'ed valid changes to one or more of the paths?

feature {NONE} -- Implementation

	populate_controls
			-- Initialise the dialog's widgets from shared settings.
		local
			ref_rep_paths: ARRAYED_LIST [STRING]
		do
			ref_rep_paths := reference_repository_paths
			if ref_rep_paths.is_empty or not ref_rep_paths.has (reference_repository_path) then
				ref_rep_paths.put_front (reference_repository_path)
				set_reference_repository_paths (ref_rep_paths)
			end
			repository_dialog_reference_path_cb.set_strings (ref_rep_paths)
			repository_dialog_reference_path_cb.i_th (ref_rep_paths.index_of (reference_repository_path, 1)).enable_select
			repository_dialog_work_path_text.set_text (work_repository_path)
		end

	repository_dialog_ok
			-- When the user clicks the OK button, save the changes and rebuild `archetype_directory'.
		local
			error_dialog: EV_INFORMATION_DIALOG
			paths_invalid: BOOLEAN
			s: STRING
		do
			s := repository_dialog_reference_path_cb.text.as_string_8
			if not s.is_equal (reference_repository_path) then
				if directory_exists (s) then
					set_reference_repository_path (s)
					has_changed_paths := True
				else
					create error_dialog.make_with_text ("Reference Repository %"" + s + "%" does not exist.")
					error_dialog.show_modal_to_window (Current)
					paths_invalid := True
				end
			end
			set_reference_repository_paths (repository_dialog_reference_path_cb.strings_8)

			s := repository_dialog_work_path_text.text.as_string_8
			if not s.is_equal (work_repository_path) then
				if s.is_empty or else kr.valid_repository_path (s) then
					set_work_repository_path (s)
					has_changed_paths := True
				else
					create error_dialog.make_with_text ("Work Repository %"" + s +
						"%" does not exist, or is the same as or a parent or a child of the Reference Repository.")
					error_dialog.show_modal_to_window (Current)
					paths_invalid := True
				end
			end

			if not paths_invalid then
				hide
			end
		end

	get_reference_repository_path
			-- Display a dialog for the user to select a new Reference Repository.
		local
			rep_path: STRING
		do
			rep_path := get_directory (reference_repository_path, Current)
			if not reference_repository_paths.has (rep_path) then
				repository_dialog_reference_path_cb.put_front (create {EV_LIST_ITEM}.make_with_text (rep_path))
				repository_dialog_reference_path_cb.first.enable_select
			end
		end

	get_work_repository_path
			-- Display a dialog for the user select the Work Repository.
		do
			if work_repository_path.is_empty then
				set_work_repository_path (reference_repository_path.twin)
			end
			repository_dialog_work_path_text.set_text (get_directory (work_repository_path, Current))
		end

	on_select_all (text: EV_TEXT_FIELD)
			-- Select all text in `text', if any.
		do
			if text /= Void and then text.text_length > 0 then
				text.select_all
			end
		end

end


--|
--| ***** BEGIN LICENSE BLOCK *****
--| Version: MPL 1.1/GPL 2.0/LGPL 2.1
--|
--| The contents of this file are subject to the Mozilla Public License Version
--| 1.1 (the 'License'); you may not use this file except in compliance with
--| the License. You may obtain a copy of the License at
--| http://www.mozilla.org/MPL/
--|
--| Software distributed under the License is distributed on an 'AS IS' basis,
--| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
--| for the specific language governing rights and limitations under the
--| License.
--|
--| The Original Code is repository_dialog.e.
--|
--| The Initial Developer of the Original Code is Thomas Beale.
--| Portions created by the Initial Developer are Copyright (C) 2003-2004
--| the Initial Developer. All Rights Reserved.
--|
--| Contributor(s):
--|
--| Alternatively, the contents of this file may be used under the terms of
--| either the GNU General Public License Version 2 or later (the 'GPL'), or
--| the GNU Lesser General Public License Version 2.1 or later (the 'LGPL'),
--| in which case the provisions of the GPL or the LGPL are applicable instead
--| of those above. If you wish to allow use of your version of this file only
--| under the terms of either the GPL or the LGPL, and not to allow others to
--| use your version of this file under the terms of the MPL, indicate your
--| decision by deleting the provisions above and replace them with the notice
--| and other provisions required by the GPL or the LGPL. If you do not delete
--| the provisions above, a recipient may use your version of this file under
--| the terms of any one of the MPL, the GPL or the LGPL.
--|
--| ***** END LICENSE BLOCK *****
--|
