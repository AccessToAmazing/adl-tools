note
	description: "Dialog for the user to enter the repository paths.%
		%The original version of this class was generated by EiffelBuild."
	date: "$Date$"
	revision: "$Revision$"

class
	REPOSITORY_DIALOG

inherit
	REPOSITORY_DIALOG_IMP

	GUI_UTILITIES
		export
			{NONE} all
		undefine
			copy, default_create
		end

	EV_STOCK_PIXMAPS
		rename
			implementation as pixmaps_implementation
		export
			{NONE} all
		undefine
			copy, default_create
		end

	SHARED_SOURCE_REPOSITORIES
		export
			{NONE} all
		undefine
			copy, default_create
		end

	SHARED_APP_UI_RESOURCES
		export
			{NONE} all
		undefine
			copy, default_create
		end

feature -- Definition

	new_profile_dummy: STRING = "new_profile"

feature {NONE} -- Initialization

	user_initialization
			-- Called by `initialize'.
			-- Any custom user initialization that
			-- could not be performed in `initialize',
			-- (due to regeneration of implementation class)
			-- can be added here.
		do
			set_icon_pixmap (adl_workbench_ico)
			repository_dialog_cancel_button.select_actions.extend (agent hide)
			set_default_cancel_button (repository_dialog_cancel_button)
			set_default_push_button (repository_dialog_ok_button)
			repository_dialog_reference_path_text.focus_in_actions.extend (agent on_select_all (repository_dialog_reference_path_text))
			repository_dialog_work_path_text.focus_in_actions.extend (agent on_select_all (repository_dialog_work_path_text))
			rep_profiles := repository_profiles.deep_twin
			populate_controls
			selected_profile := profile_combo_box.text.as_string_8
		end

	on_show
			-- On showing the dialog, set focus to the profile combo box, adding a new one if there are none yet.
		do
			if no_profiles_available then
				add_new_profile
			else
				profile_combo_box.set_focus
			end
		end

feature -- Status

	has_changed_profile: BOOLEAN
			-- Has the user chosen a new or different existing profile?

	has_changed_profile_paths: BOOLEAN
			-- Has the user changed the paths for the existing profile?

	no_profiles_available: BOOLEAN
		do
			Result := rep_profiles.is_empty
		end

feature {NONE} -- Implementation

	populate_controls
			-- Initialise the dialog's widgets from shared settings.
		do
			profile_combo_box.select_actions.block
			profile_combo_box.change_actions.block

			from rep_profiles.start until rep_profiles.off loop
				profile_combo_box.set_strings (rep_profiles.profiles.current_keys)
				if not rep_profiles.has_current_profile then
					profile_combo_box.do_all (
						agent (li: EV_LIST_ITEM)
							do
								if li.text.same_string (rep_profiles.current_profile_name) then
									li.enable_select
								end
							end
					)
					repository_dialog_reference_path_text.set_text (rep_profiles.current_profile.reference_repository)
					if rep_profiles.current_profile.has_work_repository then
						repository_dialog_work_path_text.set_text (rep_profiles.current_profile.work_repository)
					end
				end
				rep_profiles.forth
			end

			profile_combo_box.select_actions.resume
			profile_combo_box.change_actions.resume
		end

	repository_dialog_ok
			-- When the user clicks the OK button, save the changes and rebuild `archetype_directory'.
		local
			error_dialog: EV_INFORMATION_DIALOG
			paths_invalid, error_outstanding: BOOLEAN
			ref_dir, work_dir, current_prof: STRING
			new_prof: REPOSITORY_PROFILE
		do
			current_prof := profile_combo_box.text.as_string_8
			current_prof.replace_substring_all (" ", "_")
			has_changed_profile := not repository_profiles.has_current_profile or else not current_prof.same_string (repository_profiles.current_profile_name)

			-- phase 1: get the path info from the ref & work path controls; only bother if we are adding,
			-- or else there is a remaining profile(s) after deletion
			if add_pending or not rep_profiles.is_empty then
				create new_prof
				ref_dir := repository_dialog_reference_path_text.text.as_string_8
				if directory_exists (ref_dir) then
					new_prof.set_reference_repository (ref_dir)
				else
					create error_dialog.make_with_text (create_message_line ("ref_repo_not_found", <<ref_dir>>))
					error_dialog.show_modal_to_window (Current)
					paths_invalid := True
				end

				work_dir := repository_dialog_work_path_text.text.as_string_8
				if not work_dir.is_empty then
					if directory_exists (work_dir) and then not (work_dir.starts_with (ref_dir) or ref_dir.starts_with (work_dir)) then
						new_prof.set_work_repository (work_dir)
					else
						create error_dialog.make_with_text (create_message_line ("work_repo_not_invalid", <<work_dir>>))
						error_dialog.show_modal_to_window (Current)
						paths_invalid := True
					end
				end
			end

			-- phase 2: process pending actions
			if add_pending then
				if not paths_invalid then
					rep_profiles.put_profile (new_prof, current_prof)
				else
					error_outstanding := True
				end
			else -- otherwise, process removals and/or potential new selection and/or change to new or existing selection paths
				if removal_pending then
					if rep_profiles.is_empty then
						selected_profile.wipe_out
					end
				end
				if not rep_profiles.is_empty then
					if has_changed_profile and rename_pending then
						rep_profiles.rename_profile (current_prof, selected_profile)
					end
					has_changed_profile_paths := not ref_dir.same_string(repository_profiles.reference_repository_path) or
						not work_dir.same_string(repository_profiles.work_repository_path)
					if has_changed_profile_paths then
						if not paths_invalid then
							rep_profiles.put_profile (new_prof, current_prof)
						else
							error_outstanding := True
						end
					end
				end
			end

			-- phase 3: commit the changes
			if not error_outstanding then
				if current_prof.is_empty then
					rep_profiles.clear_current_profile
				else
					rep_profiles.set_current_profile_name (current_prof)
				end
				set_repository_profiles (rep_profiles)
				hide
			end
		end

	select_profile
			-- Called by `select_actions' of `profile_combo_box'.
		local
			error_dialog: EV_INFORMATION_DIALOG
			profile: REPOSITORY_PROFILE
		do
			if not path_change_pending and not add_pending and not rename_pending then
				if not profile_combo_box.text.is_empty then
					selected_profile := profile_combo_box.text.as_string_8
					profile := rep_profiles.profile (selected_profile)
					repository_dialog_reference_path_text.set_text (profile.reference_repository)

					if profile.has_work_repository then
						repository_dialog_work_path_text.set_text (profile.work_repository)
					end
				end
			else
				create error_dialog.make_with_text (create_message_line ("existing_profile_changes_pending", Void))
				error_dialog.show_modal_to_window (Current)
			end
		end

	rename_profile
			-- Called by `change_actions' of `profile_combo_box'.
			-- rename the existing profile
		do
			-- if new addition, profile is not yet known, so nothing special to do
			if not add_pending then
				rename_pending := not rep_profiles.has_profile (profile_combo_box.text)
			end
		end

	add_new_profile
			-- Called by `select_actions' of `profile_add_button'.
		local
			profs: ARRAYED_LIST[STRING]
			error_dialog: EV_INFORMATION_DIALOG
		do
			profile_combo_box.select_actions.block
			if not add_pending and not removal_pending and not rename_pending then
				create profs.make (0)
				profs.append (profile_combo_box.strings_8)
				profs.extend (new_profile_dummy)
				profile_combo_box.set_strings (profs)
				profile_combo_box.last.enable_select
				profile_combo_box.set_focus
				repository_dialog_reference_path_text.remove_text
				repository_dialog_work_path_text.remove_text
				add_pending := True
			else
				create error_dialog.make_with_text (create_message_line ("add_one_profile_only", Void))
				error_dialog.show_modal_to_window (Current)
			end
			profile_combo_box.select_actions.resume
		end

	remove_current_profile
			-- Called by `select_actions' of `profile_remove_button'.
		local
			question_dialog: EV_QUESTION_DIALOG
			error_dialog: EV_INFORMATION_DIALOG
			profs: ARRAYED_LIST[STRING]
			current_prof: STRING
		do
			profile_combo_box.select_actions.block
			if not add_pending then
				current_prof := profile_combo_box.text.as_string_8
				if not current_prof.is_empty then
					create question_dialog.make_with_text (create_message_line ("remove_profile_question", <<current_prof>>))
					question_dialog.set_buttons (<<"Yes", "No">>)
					question_dialog.show_modal_to_window (Current)
					if question_dialog.selected_button.same_string ("Yes") then
						rep_profiles.remove_profile (current_prof)
						if profile_combo_box.count > 1 then
							create profs.make (0)
							profs.compare_objects
							profs.append (profile_combo_box.strings_8)
							profs.prune_all (current_prof)
							profile_combo_box.set_strings (profs)
							profile_combo_box.last.enable_select
							repository_dialog_reference_path_text.set_text (rep_profiles.profile (profs.last).reference_repository)
							if rep_profiles.profile (profs.last).has_work_repository then
								repository_dialog_work_path_text.set_text (rep_profiles.profile (profs.last).work_repository)
							end
						else
							profile_combo_box.wipe_out
							profile_combo_box.remove_text
							repository_dialog_reference_path_text.remove_text
							repository_dialog_work_path_text.remove_text
						end
						removal_pending := True
					end
				else
					create error_dialog.make_with_text (create_message_line ("no_profile_to_remove", Void))
					error_dialog.show_modal_to_window (Current)
				end
			else
				create error_dialog.make_with_text (create_message_line ("cant_remove_with_add_pending", Void))
				error_dialog.show_modal_to_window (Current)
			end
			profile_combo_box.select_actions.resume
		end

	get_reference_repository_path
			-- Display a dialog for the user to select a new Reference Repository.
		local
			def_path: STRING
			error_dialog: EV_INFORMATION_DIALOG
		do
			if not profile_combo_box.text.is_empty then
				if repository_profiles.reference_repository_path.is_empty then
					def_path := user_config_file_directory
				else
					def_path := repository_profiles.reference_repository_path
				end
				repository_dialog_reference_path_text.set_text (get_directory (def_path, Current))
				if not repository_dialog_reference_path_text.text.same_string (repository_profiles.reference_repository_path) then
					path_change_pending := True
				end
			else
				create error_dialog.make_with_text (create_message_line ("profile_not_yet_defined", Void))
				error_dialog.show_modal_to_window (Current)
			end
		end

	get_work_repository_path
			-- Display a dialog for the user select the Work Repository.
		local
			def_path: STRING
			error_dialog: EV_INFORMATION_DIALOG
		do
			if not profile_combo_box.text.is_empty then
				if repository_profiles.work_repository_path.is_empty then
					def_path := repository_dialog_reference_path_text.text
				else
					def_path := repository_profiles.work_repository_path
				end
				repository_dialog_work_path_text.set_text (get_directory (def_path, Current))
				if not repository_dialog_work_path_text.text.same_string (repository_profiles.work_repository_path) then
					path_change_pending := True
				end
			else
				create error_dialog.make_with_text (create_message_line ("profile_not_yet_defined", Void))
				error_dialog.show_modal_to_window (Current)
			end
		end

	on_select_all (text: EV_TEXT_FIELD)
			-- Select all text in `text', if any.
		do
			if text /= Void and then text.text_length > 0 then
				text.select_all
			end
		end

	add_pending: BOOLEAN

	removal_pending: BOOLEAN

	path_change_pending: BOOLEAN

	rename_pending: BOOLEAN

	rep_profiles: attached REPOSITORY_PROFILE_CONFIG
			-- state of profiles at dialog launch, as a table of
			-- {{ref_path, working path}, prof_name}

	selected_profile: STRING
			-- name of current profile as chosen in dialog

end


--|
--| ***** BEGIN LICENSE BLOCK *****
--| Version: MPL 1.1/GPL 2.0/LGPL 2.1
--|
--| The contents of this file are subject to the Mozilla Public License Version
--| 1.1 (the 'License'); you may not use this file except in compliance with
--| the License. You may obtain a copy of the License at
--| http://www.mozilla.org/MPL/
--|
--| Software distributed under the License is distributed on an 'AS IS' basis,
--| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
--| for the specific language governing rights and limitations under the
--| License.
--|
--| The Original Code is repository_dialog.e.
--|
--| The Initial Developer of the Original Code is Thomas Beale.
--| Portions created by the Initial Developer are Copyright (C) 2003-2004
--| the Initial Developer. All Rights Reserved.
--|
--| Contributor(s):
--|
--| Alternatively, the contents of this file may be used under the terms of
--| either the GNU General Public License Version 2 or later (the 'GPL'), or
--| the GNU Lesser General Public License Version 2.1 or later (the 'LGPL'),
--| in which case the provisions of the GPL or the LGPL are applicable instead
--| of those above. If you wish to allow use of your version of this file only
--| under the terms of either the GPL or the LGPL, and not to allow others to
--| use your version of this file under the terms of the MPL, indicate your
--| decision by deleting the provisions above and replace them with the notice
--| and other provisions required by the GPL or the LGPL. If you do not delete
--| the provisions above, a recipient may use your version of this file under
--| the terms of any one of the MPL, the GPL or the LGPL.
--|
--| ***** END LICENSE BLOCK *****
--|
