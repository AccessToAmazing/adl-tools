note
	description: "Icon loader class generated by icon_code_gen"
	keywords:    "Embedded icons"
	author:      "Thomas Beale <thomas.beale@oceaninformatics.com>"
	support:     "http://www.openehr.org/issues/browse/AWB"
	copyright:   "Copyright (c) 2013- Ocean Informatics Pty Ltd"
	license:     "Apache 2.0 License <http://www.apache.org/licenses/LICENSE-2.0.html>"

class ICON_TOOL_GITHUB

inherit
	ICON_SOURCE

create
	make

feature {NONE} -- Initialization

	make
			-- Initialization
		do
			key := "tool/github"
			make_with_size (16, 16)
			fill_memory
		end

feature {NONE} -- Image data
	
	c_colors_0 (a_ptr: POINTER; a_offset: INTEGER)
			-- Fill `a_ptr' with colors data from `a_offset'.
		external
			"C inline"
		alias
			"{
				{
					#define B(q) #q
					#ifdef EIF_WINDOWS
						#define A(a,r,g,b) B(\x##b\x##g\x##r\x##a)
					#else
						#define A(a,r,g,b) B(\x##r\x##g\x##b\x##a)
					#endif

					char l_data[] =
					A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,F9) A(FF,F7,F6,F5) A(FF,EB,E5,D8) A(FF,97,8D,81) A(FF,81,81,81) A(FF,81,81,81) A(FF,9C,A3,C0) 
					A(FF,ED,F3,F4) A(FF,F8,F9,F9) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,F9,F8,F7) A(FF,D4,C3,A5) 
					A(FF,58,48,33) A(FF,11,11,11) A(FF,11,11,11) A(FF,11,11,11) A(FF,11,11,11) A(FF,11,11,11) A(FF,11,1D,27) A(FF,65,85,95) A(FF,E2,EA,F1) A(FF,F9,FA,FA) 
					A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,F9,F6,F2) A(FF,B4,95,7E) A(FF,25,11,11) A(FF,11,11,11) A(FF,11,11,11) A(FF,11,11,11) A(FF,11,11,11) 
					A(FF,11,11,11) A(FF,11,11,11) A(FF,11,11,11) A(FF,11,11,11) A(FF,2F,37,5F) A(FF,CA,DC,E9) A(FF,F9,F9,FA) A(FF,FA,FA,FA) A(FF,F9,F9,F8) A(FF,C9,AF,85) 
					A(FF,1E,11,11) A(FF,1B,1F,21) A(FF,2D,2C,2B) A(FF,1A,18,15) A(FF,11,11,11) A(FF,11,11,11) A(FF,11,11,11) A(FF,11,11,11) A(FF,21,24,27) A(FF,2D,2A,28) 
					A(FF,14,13,12) A(FF,2A,44,65) A(FF,DC,EC,F2) A(FF,FA,FA,FA) A(FF,F1,E6,CD) A(FF,40,25,11) A(FF,11,11,15) A(FF,71,8D,B1) A(FF,FA,F7,F3) A(FF,C1,BB,B4) 
					A(FF,A5,A5,A5) A(FF,A5,A5,A5) A(FF,A5,A5,A5) A(FF,A5,A5,A5) A(FF,D7,E1,EA) A(FF,FA,EE,D8) A(FF,45,28,21) A(FF,11,11,11) A(FF,58,83,A9) A(FF,F7,F8,F9) 
					A(FF,BB,90,6B) A(FF,11,11,11) A(FF,11,11,15) A(FF,71,8E,B1) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) 
					A(FF,FA,FA,FA) A(FF,FA,ED,D9) A(FF,44,29,21) A(FF,11,11,11) A(FF,11,23,47) A(FF,DC,EF,F6) A(FF,6C,50,23) A(FF,11,11,11) A(FF,19,1D,2E) A(FF,BC,D4,EC) 
					A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,F4) A(FF,97,6F,5A) A(FF,13,11,11) 
					A(FF,11,11,11) A(FF,91,C1,DD) A(FF,56,2D,11) A(FF,11,11,11) A(FF,23,41,6B) A(FF,ED,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) 
					A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,D6,B4,8F) A(FF,1D,16,11) A(FF,11,11,11) A(FF,73,9E,C7) A(FF,50,1B,11) A(FF,11,11,11) 
					A(FF,23,41,6B) A(FF,ED,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) 
					A(FF,D6,B4,8F) A(FF,1D,16,11) A(FF,11,11,11) A(FF,6C,8B,C0) A(FF,5E,3D,11) A(FF,11,11,11) A(FF,19,20,30) A(FF,C4,E2,F3) A(FF,FA,FA,FA) A(FF,FA,FA,FA) 
					A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,A0,81,5C) A(FF,13,11,11) A(FF,11,11,11) A(FF,7A,AE,CF) 
					A(FF,90,6B,4A) A(FF,11,11,11) A(FF,11,13,14) A(FF,57,71,84) A(FF,E7,F0,F7) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) 
					A(FF,FA,FA,FA) A(FF,D9,C6,B1) A(FF,33,2B,1C) A(FF,11,11,11) A(FF,11,11,23) A(FF,BB,DC,EF) A(FF,DE,C3,98) A(FF,22,16,2B) A(FF,8E,9F,A7) A(FF,64,42,32) 
					A(FF,34,3C,43) A(FF,93,A4,B1) A(FF,E0,ED,F4) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,D7,CC,B6) A(FF,7F,73,65) A(FF,25,21,1C) A(FF,11,11,11) A(FF,11,11,11) 
					A(FF,2A,4E,75) A(FF,F0,F6,F8) A(FF,F8,F6,F1) A(FF,89,6B,48) A(FF,22,2C,48) A(FF,B4,C4,BE) A(FF,62,49,32) A(FF,46,59,78) A(FF,E4,F2,F8) A(FF,FA,FA,FA) 
					A(FF,FA,FA,FA) A(FF,CA,A6,87) A(FF,20,11,11) A(FF,11,11,11) A(FF,11,11,11) A(FF,11,1E,2A) A(FF,B1,CA,E0) A(FF,F9,F9,FA) A(FF,FA,FA,F9) A(FF,F1,E9,D7) 
					A(FF,64,37,2D) A(FF,47,5A,6E) A(FF,C5,CD,DB) A(FF,E5,DF,E1) A(FF,F3,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,D8,B3,9A) A(FF,27,11,11) A(FF,11,11,11) 
					A(FF,11,11,1E) A(FF,7F,98,BF) A(FF,F5,F9,F9) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,F9,F9) A(FF,EF,E6,D8) A(FF,80,5B,4C) A(FF,18,19,1C) A(FF,3C,43,7C) 
					A(FF,EA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,D8,B3,9A) A(FF,27,11,11) A(FF,1E,2A,33) A(FF,94,A2,C4) A(FF,F3,F7,F9) A(FF,FA,FA,FA) A(FF,FA,FA,FA) 
					A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,F8,F7,F4) A(FF,CD,BD,A6) A(FF,92,97,B6) A(FF,F1,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,E8,D5,C8) 
					A(FF,8D,8E,9A) A(FF,DD,E8,EE) A(FF,F9,F9,F9) A(FF,FA,FA,FA) A(FF,FA,FA,FA) A(FF,FA,FA,FA) ;
					memcpy ((EIF_NATURAL_32 *)$a_ptr + $a_offset, &l_data, sizeof l_data - 1);
				}
			}"
		end

	build_colors (a_ptr: POINTER)
			-- Build `colors'
		do
			c_colors_0 (a_ptr, 0)
		end

end