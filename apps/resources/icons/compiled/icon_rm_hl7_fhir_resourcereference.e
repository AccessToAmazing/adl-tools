note
	description: "Icon loader class generated by icon_code_gen"
	keywords:    "Embedded icons"
	author:      "Thomas Beale <thomas.beale@oceaninformatics.com>"
	support:     "http://www.openehr.org/issues/browse/AWB"
	copyright:   "Copyright (c) 2013- Ocean Informatics Pty Ltd"
	license:     "Apache 2.0 License <http://www.apache.org/licenses/LICENSE-2.0.html>"

class ICON_RM_HL7_FHIR_RESOURCEREFERENCE

inherit
	ICON_SOURCE

create
	make

feature {NONE} -- Initialization

	make
			-- Initialization
		do
			key := "rm/hl7-fhir/resourcereference"
			make_with_size (16, 16)
			fill_memory
		end

feature {NONE} -- Image data
	
	c_colors_0 (a_ptr: POINTER; a_offset: INTEGER)
			-- Fill `a_ptr' with colors data from `a_offset'.
		external
			"C inline"
		alias
			"{
				{
					#define B(q) #q
					#ifdef EIF_WINDOWS
						#define A(a,r,g,b) B(\x##b\x##g\x##r\x##a)
					#else
						#define A(a,r,g,b) B(\x##r\x##g\x##b\x##a)
					#endif

					char l_data[] =
					A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(FF,AC,AC,AC) A(FF,AF,AF,AF) A(FF,AC,AC,AC) A(FF,AF,AF,AF) A(FF,AC,AC,AC) A(FF,AF,AF,AF) 
					A(FF,AC,AC,AC) A(FF,AF,AF,AF) A(FF,AC,AC,AC) A(FF,AF,AF,AF) A(FF,AC,AC,AC) A(FF,AF,AF,AF) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) 
					A(FF,AC,AC,AC) A(FF,AF,AF,AF) A(FF,F5,F5,F5) A(FF,AC,AC,AC) A(FF,AF,AF,AF) A(FF,F5,F5,F5) A(FF,F2,F2,F2) A(FF,F2,F2,F2) A(FF,F2,F2,F2) A(FF,F2,F2,F2) 
					A(FF,F2,F2,F2) A(FF,F2,F2,F2) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(FF,B1,B1,B1) A(FF,AA,AA,AA) A(FF,EE,EE,EE) A(FF,B1,B1,B1) 
					A(FF,AA,AA,AA) A(FF,EE,EE,EE) A(FF,F4,F4,F4) A(FF,F4,F4,F4) A(FF,F4,F4,F4) A(FF,F4,F4,F4) A(FF,F4,F4,F4) A(FF,F4,F4,F4) A(00,00,00,00) A(00,00,00,00) 
					A(00,00,00,00) A(00,00,00,00) A(FF,B1,B1,B1) A(FF,AC,AC,AC) A(FF,D9,D9,D9) A(FF,B1,B1,B1) A(FF,AC,AC,AC) A(FF,D9,D9,D9) A(FF,D9,D9,D9) A(FF,D9,D9,D9) 
					A(FF,D9,D9,D9) A(FF,D9,D9,D9) A(FF,D9,D9,D9) A(FF,D9,D9,D9) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(FF,B1,B1,B1) A(FF,AC,AC,AC) 
					A(FF,57,77,9F) A(FF,B1,B1,B1) A(FF,AC,AC,AC) A(FF,FC,FC,FC) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) 
					A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(FF,B1,B1,B1) A(FF,AC,AC,AC) A(FF,5A,7C,A4) A(FF,64,88,B3) A(FF,AC,AC,AC) A(FF,FF,FF,FF) 
					A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,64,87,B2) A(FF,64,87,B2) A(FF,64,87,B2) A(FF,64,87,B2) 
					A(FF,64,87,B2) A(FF,64,87,B2) A(FF,5A,7C,A4) A(FF,5C,81,AE) A(FF,3C,60,8A) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) 
					A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,44,6A,97) A(FF,44,6A,97) A(FF,44,6A,97) A(FF,44,6A,97) A(FF,44,6A,97) A(FF,44,6A,98) A(FF,5A,7C,A4) A(FF,5D,82,AF) 
					A(FF,3C,60,8A) A(FF,5F,72,88) A(FF,DB,DB,DB) A(FF,DB,DB,DB) A(FF,DB,DB,DB) A(FF,DB,DB,DB) A(FF,DB,DB,DB) A(FF,DB,DB,DB) A(FF,55,69,81) A(FF,55,69,81) 
					A(FF,55,69,81) A(FF,55,69,81) A(FF,55,69,81) A(FF,55,69,81) A(FF,5A,7C,A4) A(FF,5F,83,B0) A(FF,3C,60,8A) A(FF,D9,D9,D9) A(FF,D9,D9,D9) A(FF,D9,D9,D9) 
					A(FF,D9,D9,D9) A(FF,D9,D9,D9) A(FF,D9,D9,D9) A(FF,D9,D9,D9) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(FF,B1,B1,B1) A(FF,AC,AC,AC) 
					A(FF,5A,7C,A4) A(FF,64,88,B3) A(FF,AC,AC,AC) A(FF,FC,FC,FC) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) 
					A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(FF,B1,B1,B1) A(FF,AC,AC,AC) A(FF,60,7B,9D) A(FF,B1,B1,B1) A(FF,AC,AC,AC) A(FF,FF,FF,FF) 
					A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) 
					A(FF,B1,B1,B1) A(FF,AC,AC,AC) A(FF,FF,FF,FF) A(FF,B1,B1,B1) A(FF,AC,AC,AC) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) 
					A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(FF,B1,B1,B1) A(FF,AC,AC,AC) A(FF,FC,FC,FC) A(FF,B1,B1,B1) 
					A(FF,AC,AC,AC) A(FF,FC,FC,FC) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(FF,FF,FF,FF) A(00,00,00,00) A(00,00,00,00) 
					A(00,00,00,00) A(00,00,00,00) A(FF,B1,B1,B1) A(FF,AF,AF,AF) A(FF,D4,D4,D4) A(FF,B1,B1,B1) A(FF,AF,AF,AF) A(FF,D4,D4,D4) A(FF,D8,D8,D8) A(FF,D8,D8,D8) 
					A(FF,D3,D3,D3) A(FF,AC,AC,AC) A(FF,69,69,69) A(FF,A1,A1,A1) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(FF,D0,D0,D0) A(FF,8A,8A,8A) 
					A(FF,8E,8E,8E) A(FF,D0,D0,D0) A(FF,8A,8A,8A) A(FF,8E,8E,8E) A(FF,AC,AC,AC) A(FF,A9,A9,A9) A(FF,6F,6F,6F) A(FF,94,94,94) A(FF,FF,FF,FF) A(00,00,00,00) 
					A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) A(FF,FF,FF,FF) A(FF,CA,CA,CA) A(FF,BF,BF,BF) A(FF,FF,FF,FF) A(FF,CA,CA,CA) 
					A(FF,BF,BF,BF) A(FF,B4,B4,B4) A(FF,FF,FF,FF) A(00,00,00,00) A(00,00,00,00) A(00,00,00,00) ;
					memcpy ((EIF_NATURAL_32 *)$a_ptr + $a_offset, &l_data, sizeof l_data - 1);
				}
			}"
		end

	build_colors (a_ptr: POINTER)
			-- Build `colors'
		do
			c_colors_0 (a_ptr, 0)
		end

end