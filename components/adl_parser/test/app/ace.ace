system
	"adl_parser_test"

root
	APPLICATION: make

default
	document (".")
	precompiled ("$ISE_EIFFEL\precomp\spec\$ISE_PLATFORM\base")
	assertion (require)
	working_directory ("C:\project\openehr\ref_impl_eiffel\components\adl_parser\test\src\java_simulator")
	disabled_debug (yes)
	disabled_debug ("adl_invariant")
	disabled_debug ("adl_parse")
	disabled_debug ("adl_tree")
	disabled_debug ("dadl_parse")
	disabled_debug ("exclude list")
	disabled_debug ("gelex")
	disabled_debug ("geyacc")
	disabled_debug ("include list")
	disabled_debug ("og_path_parse")
	disabled_debug ("refactor_fixme")
	debug (no)
	line_generation (no)
	profile (no)
	trace (no)
	check_vape (no)
	console_application (yes)
	syntax_warning (no)
	address_expression (no)
	array_optimization (no)
	dead_code_removal (no)
	dynamic_runtime (no)
	exception_trace (no)
	inlining (no)
	multithreaded (no)


cluster
	all app:		"$OPENEHR\ref_impl_eiffel\components\adl_parser\test\src"
		exclude
			".svn"; 
		default
			assertion (no)
			assertion (require)
			assertion (ensure)
		end

	all adl_parser:		"$OPENEHR\ref_impl_eiffel\components\adl_parser\src"
		exclude
			".svn"; 
		default
			assertion (no)
			assertion (require)
			assertion (ensure)
		end

	all version:		"$OPENEHR\ref_impl_eiffel\libraries\version"
		exclude
			".svn"; 
		end

	all vendor_fixes:		"$OPENEHR\ref_impl_eiffel\libraries\vendor-fixes"
		exclude
			".svn"; "base_net";
		end

	all archetype_directory:		"$OPENEHR\ref_impl_eiffel\components\archetype_repository\src"
		exclude
			".svn"; 
		default
			assertion (no)
			assertion (check)
			assertion (require)
			assertion (ensure)
		end

	all openehr:		"$OPENEHR\ref_impl_eiffel\libraries\openehr\src"
		exclude
			".svn"; 
		default
			assertion (no)
			assertion (require)
			assertion (ensure)
		visible
			C_CODE_PHRASE
				end
			C_DV_ORDINAL
				end
			C_DV_QUANTITY
				end
		end

	all common_libs:		"$OPENEHR\ref_impl_eiffel\libraries\common_libs\src"
		exclude
			".svn"; 
		default
			assertion (no)
			assertion (require)
			assertion (ensure)
			assertion (invariant)
		end

	gobo:						"$ISE_EIFFEL\library\gobo\library"

	library gobo_string(gobo):		"$\string"

	library gobo_support(gobo):		"$\utility"

	library gobo_kernel(gobo):		"$\kernel"
		exclude
			spec; 
		end

	library gobo_kernel_spec(gobo):		"$\kernel\spec\ise"

	library gobo_lexical(gobo):		"$\lexical"

	library gobo_parse(gobo):		"$\parse"

	library gobo_structure(gobo):	"$\structure"

	library gobo_regexp(gobo):		"$\regexp"

	library gobo_design_pattern(gobo):		"$\pattern"

	library base(gobo):		"$\base"
		exclude
			"table_eiffel3"; "desc"; 
		end

	time:		"$ISE_EIFFEL\library\time"

	time_format (time):		"$\format"

external

	include_path:
		"$(ISE_EIFFEL)\library\wel\spec\windows\include",
		"$(ISE_EIFFEL)\library\gobo\library\kernel\include"

	object:
		"$(ISE_EIFFEL)\library\wel\spec\$(ISE_C_COMPILER)\lib\wel.lib",
		"$(OPENEHR)\ref_impl_eiffel\libraries\common_libs\lib\$(ISE_C_COMPILER)\method_dispatcher.lib"

end
